{"config":{"lang":["en","es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":""},{"location":"CODE_OF_CONDUCT/#codigo-de-conducta-convenido-para-el-proyecto","title":"C\u00f3digo de Conducta convenido para el proyecto.","text":""},{"location":"CODE_OF_CONDUCT/#nuestro-compromiso","title":"Nuestro compromiso","text":"<p>Nosotros, como miembros, contribuyentes y administradores nos comprometemos a hacer de la participaci\u00f3n en nuestra comunidad una experiencia libre de acoso para todo el mundo, independientemente de la edad, dimensi\u00f3n corporal, minusval\u00eda visible o invisible, etnicidad, caracter\u00edsticas sexuales, identidad y expresi\u00f3n de g\u00e9nero, nivel de experiencia, educaci\u00f3n, nivel socio-econ\u00f3mico, nacionalidad, apariencia personal, raza, religi\u00f3n, o identidad u orientaci\u00f3n sexual.</p> <p>Nos comprometemos a actuar e interactuar de maneras que contribuyan a una comunidad abierta, acogedora, diversa, inclusiva y sana.</p>"},{"location":"CODE_OF_CONDUCT/#nuestros-estandares","title":"Nuestros est\u00e1ndares","text":"<p>Ejemplos de comportamiento que contribuyen a crear un ambiente positivo para nuestra comunidad:</p> <ul> <li>Demostrar empat\u00eda y amabilidad ante otras personas</li> <li>Respeto a diferentes opiniones, puntos de vista y experiencias</li> <li>Dar y aceptar adecuadamente retroalimentaci\u00f3n constructiva</li> <li>Aceptar la responsabilidad y disculparse ante quienes se vean afectados por nuestros errores, aprendiendo de la experiencia</li> <li>Centrarse en lo que sea mejor no s\u00f3lo para nosotros como individuos, sino para la comunidad en general</li> </ul> <p>Ejemplos de comportamiento inaceptable:</p> <ul> <li>El uso de lenguaje o im\u00e1genes sexualizadas, y aproximaciones o   atenciones sexuales de cualquier tipo</li> <li>Comentarios despectivos (trolling), insultantes o derogatorios, y ataques personales o pol\u00edticos</li> <li>El acoso en p\u00fablico o privado</li> <li>Publicar informaci\u00f3n privada de otras personas, tales como direcciones f\u00edsicas o de correo   electr\u00f3nico, sin su permiso expl\u00edcito</li> <li>Otras conductas que puedan ser razonablemente consideradas como inapropiadas en un   entorno profesional</li> </ul>"},{"location":"CODE_OF_CONDUCT/#aplicacion-de-las-responsabilidades","title":"Aplicaci\u00f3n de las responsabilidades","text":"<p>Los administradores de la comunidad son responsables de aclarar y hacer cumplir nuestros est\u00e1ndares de comportamiento aceptable y tomar\u00e1n acciones apropiadas y correctivas de forma justa en respuesta a cualquier comportamiento que consideren inapropiado, amenazante, ofensivo o da\u00f1ino.</p> <p>Los administradores de la comunidad tendr\u00e1n el derecho y la responsabilidad de eliminar, editar o rechazar comentarios, commits, c\u00f3digo, ediciones de p\u00e1ginas de wiki, issues y otras contribuciones que no se alineen con este C\u00f3digo de Conducta, y comunicar\u00e1n las razones para sus decisiones de moderaci\u00f3n cuando sea apropiado.</p>"},{"location":"CODE_OF_CONDUCT/#alcance","title":"Alcance","text":"<p>Este c\u00f3digo de conducta aplica tanto a espacios del proyecto como a espacios p\u00fablicos donde un individuo est\u00e9 en representaci\u00f3n del proyecto o comunidad. Ejemplos de esto incluyen el uso de la cuenta oficial de correo electr\u00f3nico, publicaciones a trav\u00e9s de las redes sociales oficiales, o presentaciones con personas designadas en eventos en l\u00ednea o no.</p>"},{"location":"CODE_OF_CONDUCT/#aplicacion","title":"Aplicaci\u00f3n","text":"<p>Instancias de comportamiento abusivo, acosador o inaceptable de otro modo podr\u00e1n ser reportadas a los administradores de la comunidad responsables del cumplimiento a trav\u00e9s de [INSERTAR M\u00c9TODO DE CONTACTO]. Todas las quejas ser\u00e1n evaluadas e investigadas de una manera puntual y justa.</p> <p>Todos los administradores de la comunidad est\u00e1n obligados a respetar la privacidad y la seguridad de quienes reporten incidentes.</p>"},{"location":"CODE_OF_CONDUCT/#guias-de-aplicacion","title":"Gu\u00edas de Aplicaci\u00f3n","text":"<p>Los administradores de la comunidad seguir\u00e1n estas Gu\u00edas de Impacto en la Comunidad para determinar las consecuencias de cualquier acci\u00f3n que juzguen como un incumplimiento de este C\u00f3digo de Conducta:</p>"},{"location":"CODE_OF_CONDUCT/#1-correccion","title":"1. Correcci\u00f3n","text":"<p>Impacto en la Comunidad: El uso de lenguaje inapropiado u otro comportamiento considerado no profesional o no acogedor en la comunidad.</p> <p>Consecuencia: Un aviso escrito y privado por parte de los administradores de la comunidad, proporcionando claridad alrededor de la naturaleza de este incumplimiento y una explicaci\u00f3n de por qu\u00e9 el comportamiento es inaceptable. Una disculpa p\u00fablica podr\u00eda ser solicitada.</p>"},{"location":"CODE_OF_CONDUCT/#2-aviso","title":"2. Aviso","text":"<p>Impacto en la Comunidad: Un incumplimiento causado por un \u00fanico incidente o por una cadena de acciones.</p> <p>Consecuencia: Un aviso con consecuencias por comportamiento prolongado. No se interact\u00faa con las personas involucradas, incluyendo interacci\u00f3n no solicitada con quienes se encuentran aplicando el C\u00f3digo de Conducta, por un periodo especificado de tiempo. Esto incluye evitar las interacciones en espacios de la comunidad, as\u00ed como a trav\u00e9s de canales externos como las redes sociales. Incumplir estos t\u00e9rminos puede conducir a una expulsi\u00f3n temporal o permanente.</p>"},{"location":"CODE_OF_CONDUCT/#3-expulsion-temporal","title":"3. Expulsi\u00f3n temporal","text":"<p>Impacto en la Comunidad: Una serie de incumplimientos de los est\u00e1ndares de la comunidad, incluyendo comportamiento inapropiado continuo.</p> <p>Consecuencia: Una expulsi\u00f3n temporal de cualquier forma de interacci\u00f3n o comunicaci\u00f3n p\u00fablica con la comunidad durante un intervalo de tiempo especificado. No se permite interactuar de manera p\u00fablica o privada con las personas involucradas, incluyendo interacciones no solicitadas con quienes se encuentran aplicando el C\u00f3digo de Conducta, durante este periodo. Incumplir estos t\u00e9rminos puede conducir a una expulsi\u00f3n permanente.</p>"},{"location":"CODE_OF_CONDUCT/#4-expulsion-permanente","title":"4. Expulsi\u00f3n permanente","text":"<p>Impacto en la Comunidad: Demostrar un patr\u00f3n sistem\u00e1tico de incumplimientos de los est\u00e1ndares de la comunidad, incluyendo conductas inapropiadas prolongadas en el tiempo, acoso de individuos, o agresiones o menosprecio a grupos de individuos.</p> <p>Consecuencia: Una expulsi\u00f3n permanente de cualquier tipo de interacci\u00f3n p\u00fablica con la comunidad del proyecto.</p>"},{"location":"CODE_OF_CONDUCT/#atribucion","title":"Atribuci\u00f3n","text":"<p>Este C\u00f3digo de Conducta es una adaptaci\u00f3n del Contributor Covenant, versi\u00f3n 2.0, disponible en https://www.contributor-covenant.org/es/version/2/0/code_of_conduct.html</p> <p>Las Gu\u00edas de Impacto en la Comunidad est\u00e1n inspiradas en la escalera de aplicaci\u00f3n del c\u00f3digo de conducta de Mozilla.</p> <p>Para respuestas a las preguntas frecuentes de este c\u00f3digo de conducta, consulta las FAQ en https://www.contributor-covenant.org/faq. Hay traducciones disponibles en https://www.contributor-covenant.org/translations</p>"},{"location":"CONTRIBUTING/","title":"Colaborando con Cacao Accounting.","text":"<p>Gracias por su interes en colaborar con Cacao Accounting (el proyecto).</p>"},{"location":"CONTRIBUTING/#licencia-del-proyecto","title":"Licencia del Proyecto.","text":"<p>Cacao Accounting es software libre y de c\u00f3digo abierto liberado bajo la licencia Apache Versi\u00f3n 2 (la licencia del proyecto), esto quiere decir que los usuarios del proyecto pueden:</p> <ul> <li>Usar el proyecto con o sin fines de lucro.</li> <li>Modificar el proyecto para ajustarlo a sus necesidades especificas (definiendo claramente los cambios realizados al proyecto original).</li> <li>Distribuir el software original o modificado. Si distribuyen versiones modificadas, deben incluir una copia de la licencia y un aviso de los cambios realizados.</li> </ul> <p>Sin embargo los usuarios no pueden:</p> <ul> <li>Hacer uso de las marcas registradas del proyecto sin permiso explicito.</li> <li>Requerir garantias de cualquier tipo; el proyecto se distribuye tal cual sin garantias de que pueda ser \u00fatil para alg\u00fan fin especifico.</li> </ul> <p>Adicionalmente los usuarios deben incluir un aviso de copyright y la renuncia de responsabilidad cuando distribuyen el software, asegurando que se reconozca la autor\u00eda original.</p> <p>La licencia Apache Versi\u00f3n 2 proporciona una concesi\u00f3n de derechos de patente, lo que significa que si un contribuyente aporta c\u00f3digo, no puede demandar a los usuarios del software por infracci\u00f3n de patentes relacionadas con ese c\u00f3digo, es porque que se solicita que los colaboradores del proyecto acepten el Acuerdo de Aceptaci\u00f3n de la Licencia antes de incluir sus aportes en el proyecto.</p>"},{"location":"CONTRIBUTING/#certifica-el-origen-de-tus-aportes","title":"Certifica el origen de tus aportes.","text":"<p>Para incorporar tus aportes al proyecto requerimos que certifiques que el o los aportes son de tu propiedad o que tienes permiso de terceros para incorporar el o los aportes al proyecto, siguiendo el certificado de origen del desarrollador.</p> <p>Recomendamos ejecutar:</p> <pre><code>git commit -s\n</code></pre> <p>Y se agregara una firma apropiada al commit, no se incluiran en el proyecto commits sin el correspondiente Sing-Off.</p>"},{"location":"CONTRIBUTING/#colaborando-con-el-proyecto","title":"Colaborando con el proyecto","text":""},{"location":"CONTRIBUTING/#formas-de-colaborar","title":"Formas de colaborar.","text":"<p>Pueden colaborar de distintas formas:</p> <ul> <li>Como desarrollador.</li> <li>Como control de Calidad (QA).</li> <li>Escribiendo y mejorando la documentaci\u00f3n o el Manual de Usuario.</li> <li>Aportando ideas de nuevas caracteristicas.</li> <li>Reportando errores.</li> <li>Traduciendo.</li> <li>Brindando gu\u00eda y soporte a otros usuarios.</li> <li>Compartiendo el proyecto con otros.</li> </ul> <p>Al formar de la comunidad del proyecto debes seguir el c\u00f3digo de conducta establecido.</p>"},{"location":"CONTRIBUTING/#colaborando-con-el-desarrollo-del-proyecto","title":"Colaborando con el desarrollo del proyecto:","text":"<p>El desarrollo es multiplataforma, puedes utilizar tanto Windows, Linux o Mac para aportar el proyecto, para colaborar con el proyecto necesitas:</p> <ul> <li>GIT</li> <li>Yarn</li> <li>Python</li> </ul> <p>La versi\u00f3n minima de Python soportada es: &gt;=3.8</p> <p>Tecnolog\u00edas utilizadas:</p> <ul> <li>Backend: Flask.</li> <li>Frontend: Bootstrap 5.</li> <li>ORM: SQLAlchemy.</li> </ul> <p>El desarrollo se realiza en la rama <code>development</code>, una vez el proyecto sea liberado para producci\u00f3n la rama <code>main</code> contendra la \u00faltma versi\u00f3n apta su uso en producci\u00f3n.</p>"},{"location":"CONTRIBUTING/#obteniendo-el-codigo-fuente","title":"Obteniendo el codigo fuente:","text":"<p>Descarga el codigo fuente con:</p> <pre><code>git clone https://github.com/cacao-accounting/cacao-accounting.git\ncd cacao-accounting\n</code></pre> <p>Para iniciar el proyecto es necesario seguir estos pasos:</p>"},{"location":"CONTRIBUTING/#crear-un-entorno-virtual-de-python","title":"Crear un entorno virtual de python.","text":"<pre><code>python -m venv venv\n# Windows:\n.\\venv\\Scripts\\activate.bat\n# Linux y MAC: \nsource venv/bin/activate \n</code></pre>"},{"location":"CONTRIBUTING/#instalar-las-dependencias","title":"Instalar las dependencias:","text":"<pre><code>python -m pip install -r development.txt\npython -m pip install -e .\ncd cacao_accounting/static\nnpm install\n</code></pre> <p>Puede verificar que la instalaci\u00f3n fue correcta ejecutando:</p> <pre><code>cacaoctl\nUsage: python -m flask [OPTIONS] COMMAND [ARGS]...\n\n  Interfaz de linea de comandos para la administraci\u00f3n de Cacao Accounting.\n\nOptions:\n  --version  Show the flask version\n  --help     Show this message and exit.\n\nCommands:\n  cleandb     Elimina la base de datos, solo disponible para desarrollo.\n  db          Perform database migrations.\n  initdb      Crea el esquema de la base de datos.\n  routes      Show the routes for the app.\n  run         Run a development server.\n  serve       Inicio la aplicacion con waitress como servidor WSGI por...\n  shell       Run a shell in the app context.\n  version     Muestra la version actual instalada.\n</code></pre>"},{"location":"CONTRIBUTING/#esquema-de-la-base-de-datos","title":"Esquema de la base de datos","text":"<p>Para crear una base de datos de pruebas ejecutar:</p> <pre><code>cacaoctl initdb\n</code></pre>"},{"location":"CONTRIBUTING/#ejecutar-servidor-de-desarrollo","title":"Ejecutar servidor de desarrollo:","text":"<p>Para acceder al proyecto podemos utilizar el servidor web de desarrollo incluido en flask:</p> <pre><code>FLASK_ENV=development  # Linux\nset FLASK_ENV=\"development\"  # Windows\ncacaoctl serve\n</code></pre> <p>Para verficiar que el proyecto se ejecuta correctamente con un servidor WSGI acto para producci\u00f3n ejecutar:</p> <pre><code>cacaoctl serve\n</code></pre> <p>El usuario de pruebas es <code>cacao</code> con contrase\u00f1a <code>cacao</code>.</p>"},{"location":"CONTRIBUTING/#guia-de-estilo","title":"Gu\u00eda de estilo:","text":"<p>Seguimos PEP8 con un largo de linea de 127 caracteres maximo.</p> <p>Black es una excelente herramienta para dar formato a tu c\u00f3digo antes de hacer commit de tus cambios.</p> <p>Si usa VSCode puede configurar black para formatear sus cambios al guardar.</p>"},{"location":"CONTRIBUTING/#pruebas-automaticas","title":"Pruebas automaticas:","text":"<p>Utilizamos flake8 y pytest para asegurar la calidad del c\u00f3digo fuente del proyecto.</p> <p>Recomendamos ejecutar antes de enviar tus cambios:</p> <pre><code>bash run_test.sh\n</code></pre>"},{"location":"CONTRIBUTING/#escribe-un-buen-mensaje-en-tu-commit","title":"Escribe un buen mensaje en tu commit","text":"<p>Agracedemos te tomes tu tiempo para escribir un buen mensaje en tus commit, recomendamos seguir este ejemplo de Chris Beams:</p> <pre><code>Summarize changes in around 50 characters or less\n\nMore detailed explanatory text, if necessary. Wrap it to about 72\ncharacters or so. In some contexts, the first line is treated as the\nsubject of the commit and the rest of the text as the body. The\nblank line separating the summary from the body is critical (unless\nyou omit the body entirely); various tools like `log`, `shortlog`\nand `rebase` can get confused if you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how (the code explains that).\nAre there side effects or other unintuitive consequences of this\nchange? Here's the place to explain them.\n\nFurther paragraphs come after blank lines.\n\n - Bullet points are okay, too\n\n - Typically a hyphen or asterisk is used for the bullet, preceded\n   by a single space, with blank lines in between, but conventions\n   vary here\n\nIf you use an issue tracker, put references to them at the bottom,\nlike this:\n\nResolves: #123\nSee also: #456, #789\n</code></pre> <p>Otros ejemplos de buenos mensajes de commit se pueden encontrar aca:</p> <ul> <li>Buenas Practicas En Commits De Git </li> <li>How to Write a Git Commit Message</li> </ul>"},{"location":"CONTRIBUTING/#utilizar-commits-convencionales","title":"Utilizar Commits Convencionales:","text":"<p>Solicitamos su apoyo para adoptar Commits Convencionales:</p> <pre><code> - build: Cambios que efectan la distribuci\u00f3n del proyecto.\n - ci: Actualizaci\u00f3n a herramientas para pruebas automaticas.\n - docs: Actualizacion de la documentaci\u00f3n.\n - feat: Agrega funcionalidades nuevas.\n - fix: Correci\u00f3n de errores.\n - gui: Cambios que afectan la interfaz de usuario pero no la logica de negocios.\n - refactor: Modificaciones que no agregan nuevas funciones o arreglan errores.\n - style: Correcciones de Estilo.\n - test: Cambios en pruebas unitarios.\n - chore: Cambios que no afectan el funcionamiento del codigo fuente.\n</code></pre> <p>Independientemente del tipo un commit si este contiene el texto BREAKING CHANGE, sin importar su tipo, se traducen a un cambio de versi\u00f3n MAJOR.</p>"},{"location":"CONTRIBUTING/#versionado-semantico","title":"Versionado semantico","text":"<p>Para Cacao Accounting hemos adoptado versiones semanticas.</p> <p>Mayor: Al ser una aplicaci\u00f3n contable trabajamos con datos historicos, as\u00ed que cualquier cambio en la estructura de base datos que agregue cambios no compatibles con versiones anteriores se debera considerar un cambio mayor y requerir un lanzamiento mayor. Una migraci\u00f3n efectiva del esquema de la base de datos debe proveerse a los usuarios.</p> <p>Menor: Lanzamiento de nuevas caracteristicas.</p> <p>Path: Correciones menores.</p> <p>Fix: Correci\u00f3n de errores criticos.</p>"},{"location":"CONTRIBUTING/#ejecutar-pruebas-unitarias","title":"Ejecutar pruebas unitarias:","text":"<pre><code>bash run_test.sh\n</code></pre>"},{"location":"CONTRIBUTING/#configurar-base-de-datos-para-pruebas","title":"Configurar Base de datos para pruebas","text":"<p>El proyecto se prueba con SQLite, MySQL 8, Postgresql 13 y MS SQL Server.</p>"},{"location":"CONTRIBUTING/#mysql","title":"MySQL","text":"<p>Para crear una base de datos de pruebas ejecutar los siguientes queries en MySQL:</p> <pre><code>CREATE DATABASE IF NOT EXISTS cacao;\nCREATE USER IF NOT EXISTS 'cacao' IDENTIFIED BY 'cacao';\nGRANT ALL PRIVILEGES ON cacao.* TO 'cacao';\nFLUSH PRIVILEGES;\n</code></pre>"},{"location":"CONTRIBUTING/#postgresql","title":"Postgresql","text":"<p>Para crear una base de datos de pruebas ejecutar los siguientes queries en Postgresql:</p> <pre><code>CREATE DATABASE cacao;\nCREATE USER cacao WITH PASSWORD 'cacao';\nGRANT ALL PRIVILEGES ON DATABASE cacao TO cacao;\n</code></pre>"},{"location":"CONTRIBUTING/#empaquetar-para-distribucion","title":"Empaquetar para distribuci\u00f3n:","text":"<p>El proyecto se debe publicar de forma automatica en PyPI si todas las pruebas automaticas pasan correctamente, solo se publica c\u00f3digo de la rama <code>main</code>, el proceso fallara si no se actualizado la versi\u00f3n del proyecto (esto es un efecto esperado, no un error de configuraci\u00f3n).</p> <p>Es un objetivo principal que el proyecto sea pip instalable as\u00ed como ofrecer una versi\u00f3n del proyecto que pueda ser utilizada como aplicaci\u00f3n de escritorio.</p>"},{"location":"CONTRIBUTING/#ignorar-correcciones-de-estilo-en-git-blame","title":"Ignorar correcciones de estilo en git blame","text":"<pre><code>git config blame.ignoreRevsFile .git-blame-ignore-revs\n</code></pre>"},{"location":"about/","title":"About Cacao Accounting.","text":""},{"location":"api/","title":"Api","text":"<p>Modulo administrativo.</p> <p>Interface principal de la aplicacion.</p> <p>Aqu\u00ed creamos la funci\u00f3n que define la \"app\" que se ejecuta en el servidor WSGI.</p>"},{"location":"api/#cacao_accounting.admin.admin_","title":"<code>admin_()</code>","text":"<p>Definici\u00f3n del modulo administrativo.</p> Source code in <code>cacao_accounting/admin/__init__.py</code> <pre><code>@admin.route(\"/admin\")\n@admin.route(\"/ajustes\")\n@admin.route(\"/administracion\")\n@admin.route(\"/configuracion\")\n@admin.route(\"/settings\")\n@login_required\n@modulo_activo(\"admin\")\ndef admin_():\n    \"\"\"Definici\u00f3n del modulo administrativo.\"\"\"\n    return render_template(\"admin.html\")\n</code></pre>"},{"location":"api/#cacao_accounting.admin.lista_modulos","title":"<code>lista_modulos()</code>","text":"<p>Define vista para listar modulos del sistema.</p> Source code in <code>cacao_accounting/admin/__init__.py</code> <pre><code>@admin.route(\"/settings/modules\")\n@login_required\n@modulo_activo(\"admin\")\ndef lista_modulos():\n    \"\"\"Define vista para listar modulos del sistema.\"\"\"\n    return render_template(\"admin/modulos.html\")\n</code></pre>"},{"location":"api/#cacao_accounting.actualiza_variables_globales_jinja","title":"<code>actualiza_variables_globales_jinja(app=None)</code>","text":"<p>Utilidad para asegurar que varios opciones globales esten dispinibles en Jinja2.</p> Source code in <code>cacao_accounting/__init__.py</code> <pre><code>def actualiza_variables_globales_jinja(app: Union[Flask, None] = None) -&gt; None:\n    \"\"\"Utilidad para asegurar que varios opciones globales esten dispinibles en Jinja2.\"\"\"\n    if app and isinstance(app, Flask):\n        with app.app_context():\n            app.jinja_env.trim_blocks = True\n            app.jinja_env.lstrip_blocks = True\n            app.jinja_env.globals.update(validar_modulo_activo=validar_modulo_activo)\n            app.jinja_env.globals.update(permisos=Permisos)\n            app.jinja_env.globals.update(MODO_ESCRITORIO=MODO_ESCRITORIO)\n            app.jinja_env.globals.update(TESTING=TESTING_MODE)\n            # En las plantillas no se utiliza el termino permiso para evitar un conflicto de nombre\n            # se utiliza \"acceso\", para ello al inicio de cada plantilla se debe establecer el\n            # nivel del permiso de cada usuario agregando la siguiente linea:\n            # {% set acceso = permisos(modulo=id_modulo(modulo), usuario=usuario.id)%}\n            # donde modulo es uno de \"accounting\", \"cash\", \"purchases\", \"inventory\", \"sales\"\n            # puede ser que modulos adicionales se encuentren instalados en el sistema, pero esos\n            # son los 5 modulos predeterminados del sistema.\n            # El sistema de permisos verifica los siguientes accesos predeterminados:\n            # \"actualizar\", \"anular\", \"autorizar\", \"bi\", \"cerrar\", \"configurar\", \"consultar\",\n            # \"corregir\", \"crear\", \"editar\", \"eliminar\", \"importar\", \"listar\", \"reportes\",\n            # \"solicitar\", \"validar\" y \"validar_solicitud\"\n            app.jinja_env.globals.update(id_modulo=obtener_id_modulo_por_nombre)\n            app.jinja_env.globals.update(usuario=current_user)\n            app.jinja_env.globals.update(entidades_creadas=entidades_creadas)\n            # now available globally in templates\n            app.jinja_env.globals.update(now=datetime.now)\n            if PRERELEASE:\n                app.jinja_env.globals.update(bdrul=app.config.get(\"SQLALCHEMY_DATABASE_URI\"))\n                app.jinja_env.globals.update(development=True)\n\n    else:\n        raise RuntimeError(ERROR2)\n</code></pre>"},{"location":"api/#cacao_accounting.command","title":"<code>command()</code>","text":"<p>Interfaz de linea de commandos.</p> Source code in <code>cacao_accounting/__init__.py</code> <pre><code>def command() -&gt; None:  # pragma: no cover\n    \"\"\"Interfaz de linea de commandos.\"\"\"\n    from cacao_accounting.cli import linea_comandos\n\n    linea_comandos(as_module=\"cacao_accounting\")\n</code></pre>"},{"location":"api/#cacao_accounting.create_app","title":"<code>create_app(ajustes=None)</code>","text":"<p>Aplication factory.</p> Source code in <code>cacao_accounting/__init__.py</code> <pre><code>def create_app(ajustes: Union[dict, None] = None) -&gt; Flask:\n    \"\"\"Aplication factory.\"\"\"\n    cacao_app = Flask(\n        \"cacao_accounting\",\n        template_folder=DIRECTORIO_PLANTILLAS,\n        static_folder=DIRECTORIO_ARCHIVOS,\n    )\n\n    if ajustes:\n        cacao_app.config.from_mapping(ajustes)\n\n    @cacao_app.cli.command()\n    def cleandb():  # pragma: no cover\n        \"\"\"Elimina la base de datos, solo disponible para desarrollo.\"\"\"\n        if TESTING_MODE:\n            database.drop_all()\n\n    @cacao_app.cli.command()\n    def version():  # pragma: no cover\n        \"\"\"Muestra la version actual instalada.\"\"\"\n        from cacao_accounting.version import VERSION\n\n        print(VERSION)\n\n    @cacao_app.cli.command()\n    def serve():  # pragma: no cover\n        \"\"\"Inicio la aplicacion con waitress como servidor WSGI por  defecto.\"\"\"\n        from cacao_accounting.server import server\n\n        server()\n\n    @cacao_app.cli.command()\n    def setupdb():  # pragma: no cover\n        \"\"\"Define una base de datos de desarrollo nueva.\"\"\"\n        from cacao_accounting.database.helpers import inicia_base_de_datos\n\n        user = environ.get(\"CACAO_USER\") or \"cacao\"\n        passwd = environ.get(\"CACAO_PSWD\") or \"cacao\"\n\n        if TESTING_MODE:\n            database.drop_all()\n            inicia_base_de_datos(app=cacao_app, user=user, passwd=passwd, with_examples=True)\n        else:\n            inicia_base_de_datos(app=cacao_app, user=user, passwd=passwd, with_examples=False)\n\n    @cacao_app.before_request\n    def before_request():  # pragma: no cover\n        \"\"\"Establece un periodo de 30 minutos de valides de la sesi\u00f3n.\"\"\"\n        session.permanent = True\n        cacao_app.permanent_session_lifetime = timedelta(minutes=30)\n\n    actualiza_variables_globales_jinja(app=cacao_app)\n    iniciar_extenciones(app=cacao_app)\n    registrar_blueprints(app=cacao_app)\n    registrar_rutas_predeterminadas(app=cacao_app)\n\n    return cacao_app\n</code></pre>"},{"location":"api/#cacao_accounting.iniciar_extenciones","title":"<code>iniciar_extenciones(app=None)</code>","text":"<p>Inicializa extenciones.</p> Source code in <code>cacao_accounting/__init__.py</code> <pre><code>def iniciar_extenciones(app: Union[Flask, None] = None) -&gt; None:\n    \"\"\"Inicializa extenciones.\"\"\"\n    if app and isinstance(app, Flask):\n        # alembic.init_app(app)\n        database.init_app(app)\n        administrador_sesion.init_app(app)\n        cache.init_app(app)\n    else:\n        raise RuntimeError(ERROR2)\n</code></pre>"},{"location":"api/#cacao_accounting.registrar_blueprints","title":"<code>registrar_blueprints(app=None)</code>","text":"<p>Registra blueprints por defecto.</p> Source code in <code>cacao_accounting/__init__.py</code> <pre><code>def registrar_blueprints(app: Union[Flask, None] = None) -&gt; None:\n    \"\"\"Registra blueprints por defecto.\"\"\"\n    if app and isinstance(app, Flask):\n        with app.app_context():\n            app.register_blueprint(admin)\n            app.register_blueprint(api)\n            app.register_blueprint(main_app)\n            app.register_blueprint(login)\n            registrar_modulos_adicionales(app)\n            # Main Modules\n            app.register_blueprint(bancos, url_prefix=\"/cash_management\")\n            app.register_blueprint(contabilidad, url_prefix=\"/accounting\")\n            app.register_blueprint(compras, url_prefix=\"/buying\")\n            app.register_blueprint(inventario, url_prefix=\"/inventory\")\n            app.register_blueprint(ventas, url_prefix=\"/sales\")\n            app.register_blueprint(setup_wizard, url_prefix=\"/setup\")\n\n    else:\n        raise RuntimeError(ERROR2)\n</code></pre>"},{"location":"api/#cacao_accounting.registrar_rutas_predeterminadas","title":"<code>registrar_rutas_predeterminadas(app=None)</code>","text":"<p>Registra rutas predeterminadas.</p> Source code in <code>cacao_accounting/__init__.py</code> <pre><code>def registrar_rutas_predeterminadas(app: Union[Flask, None] = None) -&gt; None:\n    \"\"\"Registra rutas predeterminadas.\"\"\"\n    if app and isinstance(app, Flask):\n        from flask import render_template\n\n        @app.errorhandler(404)\n        def error_404(error):\n            \"\"\"Pagina personalizada para recursos no encontrados.\"\"\"\n            if error:\n                return render_template(\"404.html\"), 404\n\n        @app.errorhandler(403)\n        def error_403(error):\n            \"\"\"Pagina personalizada para solicitar acceso a recursos no autorizados.\"\"\"\n            if error:\n                return render_template(\"403.html\"), 403\n\n        @app.errorhandler(400)\n        def error_400(error):\n            \"\"\"Pagina personalizada para solicitar invalida.\"\"\"\n            if error:\n                return render_template(\"400.html\"), 400\n\n    else:\n        raise RuntimeError(ERROR2)\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#unreleased-yyyy-mm-dd","title":"[Unreleased] - yyyy-mm-dd","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Accounting Module</li> <li>Entity</li> <li>Accounting Account</li> <li>Cost Center</li> <li>Bussiness Unit</li> <li>Project</li> <li>Currency</li> <li>Exchange Rate</li> <li>Accounting Period</li> <li>Series</li> <li>System Administration</li> <li>Modules</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":""},{"location":"changelog/#changed","title":"Changed","text":""},{"location":"changelog/#removed","title":"Removed","text":""},{"location":"ci/","title":"Unit Testing","text":"<p>The accounting records of companies using Cacao Accounting is something we care about, so we have many tests to check the quality of a Cacao Accounting release.</p> <ul> <li>Python Package: Check the code aganist various Python versions, you can run the test suite with: <code>CACAO_TEST=True SECRET_KEY=ASD123kljaAddS python -m pytest -v -s --slow=True</code></li> <li>Coverage: Generate code coverage report.</li> <li>Database Validation: Check the database schema aganist multiple database engines, we check aganist SQLite, MySQL and PostgreSQL.</li> <li>Publish to PyPi: Publish the last release to the Python Package Index, this will fail if there is not a update the release.</li> </ul>"},{"location":"container/","title":"Setup Cacao Accounting from the OCI image.","text":"<p>A OCI image  is available to execute Cacao Accounting in containers based deployments, the OCI image is hosted in Quay .</p> <p>Note</p> <p>If you do not need a container based deployment you can install Cacao Accounting as a Python package from the package hosted at pypi .</p> <p>Info</p> <p>This guide uses <code>podman</code> and <code>cockpit</code> as reference, but you can use any tool you prefer to run the Cacao Accounting OCI image like Docker CE.</p>"},{"location":"container/#install-the-podman-tool","title":"Install the <code>podman</code> tool.","text":"<p><code>Podman</code>  is a container administration tool that organice groups of containerized services in <code>pods</code>. Install podman in your server following these instructions:</p>  Ubuntu / Debian and derivates Fedora, Rocky Linux, Alma Linux, RHEL. <pre><code>sudo apt install -y podman\n</code></pre> <pre><code>sudo dnf -y install podman\n</code></pre>"},{"location":"container/#cockpit-manager","title":"Cockpit Manager","text":"<p>Cockpit is a web based Linux administration tool that can manage containers and pod with a web interface, you can perform another administrative tasks :</p>  Ubuntu / Debian and derivates Fedora, Rocky Linux, Alma Linux, RHEL. <pre><code>sudo apt -y install cockpit-podman cockpit\nsudo systemctl enable --now cockpit.socket\n</code></pre> <pre><code>sudo dnf -y install cockpit-podman cockpit\nsudo systemctl enable --now cockpit.socket\n</code></pre> <p>The next screenshot shows a Fedora Server host running multiple Cacao Accounting instances running in pods:</p> <p></p>"},{"location":"container/#execute-the-cacao-accounting-oci-imange","title":"Execute the Cacao Accounting OCI imange.","text":"<p>To execute de Cacao Accounting OCI image you need to setup the following services:</p> <ol> <li>The Cacao Accounting wsgi app.</li> <li>A database service, you can use Postgresql or MySQL.</li> <li>A web server to handle users request, you can use Nginx, Caddy or any web server with proxy functionality.</li> <li>A optional Redis service for caching.</li> </ol> <p>Info</p> <p>This guide uses <code>caddy</code> because its simple configuration but Nginx is a another well documented web server option.</p>"},{"location":"container/#create-a-caddy-server-configuration-file","title":"Create a  Caddy Server configuration file.","text":"<p>Similar to working with <code>podman-compose</code> it is recommended to create a directory to store the configuration files needed to execute the services that a Cacao Accounting instance requires:</p> <pre><code>mkdir cacao-accounting-services\ncd cacao-accounting-services\ntouch Caddyfile\n</code></pre> <p>Copy this base configuration to the Caddyfile:</p> <pre><code>:80 {\n    reverse_proxy localhost:8080\n}\n</code></pre> <p>Note</p> <p>Additional details to use Caddy as a proxy server is available in the Caddy website.</p>"},{"location":"container/#create-a-pod-to-group-cacao-accounting-services","title":"Create a <code>pod</code> to group Cacao Accounting services.","text":"<p>Note</p> <p>You can create pod and services with the Cockpit Web UI interface, but for the brevety of this guide we will create the inicial services from the command line, once created the services can we handled with Cockpit.</p> <p>Those are the commands required to setup a Cacao Accounting deploymen (chosee your prefered database service):</p> <p>Tip</p> <p>Do not copy and paste these commands directly, you can download a example script above and edit it with your prefered text editor.</p>  MySQL Postgresql <pre><code>podman pod create --replace --name cacao-mysql -p 9080:80 -p 9443:443 -p 9443:443/udp\n\npodman volume create --ignore cacao-mysql-backup\n\npodman run --pod cacao-mysql --rm --replace --init --name cacao-mysql-db \\\n  --volume cacao-mysql-backup:/var/lib/mysql \\\n  -e MYSQL_ROOT_PASSWORD=cacaodb \\\n  -e MYSQL_DATABASE=cacaodb \\\n  -e MYSQL_USER=cacaodb \\\n  -e MYSQL_PASSWORD=cacaodb \\\n  -d docker.io/library/mysql:8\n\npodman run --pod cacao-mysql --rm --replace --init --name cacao-mysql-server \\\n  -v ./Caddyfile:/etc/caddy/Caddyfile:z \\\n  -v caddy_data:/data \\\n  -v caddy_config:/config \\\n  -d docker.io/library/caddy:alpine\n\npodman run --pod cacao-mysql --rm --replace --init --name cacao-mysql-app \\\n  -e CACAO_KEY=nsjksAAA.ldknsdlkd532445yrVBNyrgfhdyyreys+++++ljdn \\\n  -e CACAO_DB=mysql+pymysql://cacaodb:cacaodb@localhost:3306/cacaodb \\\n  -e CACAO_USER=cacaouser \\\n  -e CACAO_PSWD=cacaopswd \\\n  -d quay.io/cacaoaccounting/cacaoaccounting:main\n</code></pre> <p>Download the base script for MySQL in the same directory of your Caddy file and edit.</p> <p>Warning</p> <p>Review the script before running it, it is adviced to setup a custom <code>user</code> and <code>password</code> for the  Cacao Accounting app.</p> <pre><code>$ curl -O https://raw.githubusercontent.com/cacao-accounting/cacao-accounting/refs/heads/main/docs/oci_files/mysql.sh\n$ ls\nmysql.sh  Caddyfile\n$ bash mysql.sh\n</code></pre> <pre><code>podman pod create --replace --name cacao-psql -p 7080:80 -p 9444:443 -p 9444:443/udp\n\npodman volume create --ignore cacao-postgresql-backup\n\npodman run --pod cacao-psql --rm --replace --init --name cacao-psql-db \\\n  --volume cacao-postgresql-backup:/var/lib/postgresql/data \\\n  -e POSTGRES_DB=cacaodb \\\n  -e POSTGRES_USER=cacaodb \\\n  -e POSTGRES_PASSWORD=cacaodb \\\n  -d docker.io/library/postgres:17-alpine\n\npodman run --pod cacao-psql --rm --replace --init --name cacao-psql-server \\\n  -v ./Caddyfile:/etc/caddy/Caddyfile:z \\\n  -v caddy_pg_data:/data \\\n  -v caddy_pg_config:/config \\\n  -d docker.io/library/caddy:alpine\n\npodman run --pod cacao-psql --rm --replace --init --name cacao-psql-app \\\n  -e CACAO_KEY=nsjksldknsdlkLKJ,dsljasfsadggfhh+++++++ASDhhf5325364dn \\\n  -e CACAO_DB=postgresql+pg8000://cacaodb:cacaodb@localhost:5432/cacaodb \\\n  -e CACAO_USER=cacaouser \\\n  -e CACAO_PSWD=cacaopswd \\\n  -d quay.io/cacaoaccounting/cacaoaccounting:main\n</code></pre> <p>Download the base script for Postgresql in the same directory of your Caddy file and edit.</p> <p>Warning</p> <p>Review the script before running it, it is adviced to setup a custom <code>user</code> and <code>password</code> for the  Cacao Accounting app.</p> <pre><code>$ curl -O https://raw.githubusercontent.com/cacao-accounting/cacao-accounting/refs/heads/main/docs/oci_files/psql.sh\n$ ls\npsql.sh  Caddyfile\n$ bash psql.sh\n</code></pre>"},{"location":"container/#allow-caddy-server-to-read-the-caddyfile","title":"Allow  <code>Caddy Server</code> to read the <code>Caddyfile</code>.","text":"<p>In Fedora, Rocky Linux, Alma Linux with active SELinux the <code>:z</code> option is required to grant the Caddy service read access to the Caddyfile, other operative system like Debian or Ubuntu try <code>:ro</code> to grant read access to the process running the container to the host file system.</p> <p>Info</p> <p>You can read more about containers file system access in this post: https://www.redhat.com/en/blog/container-permission-denied-errors</p>"},{"location":"container/#allow-access-to-restricted-ports","title":"Allow access to restricted ports.","text":"<p>Warning</p> <p>It is recomended to run podman containers as normal users (not root or sudo), running as root you can map your pod to ports under 1024.</p> <p>Running <code>podman</code> as a not <code>root</code> user will no have access to map ports under <code>1024</code>.</p> <p>!! info</p> <pre><code>You can read more about containers port mapping in this post: [https://access.redhat.com/solutions/7044059](https://access.redhat.com/solutions/7044059)\n</code></pre> <p>Most of the time this is not a issue, but you can use <code>redir</code> to redirect traffic to restricted ports:</p> <pre><code>sudo dnf install redir\nsudo redir -n -s :80 127.0.0.1:8080\n</code></pre> <p>You can run podman as root or with sudo to grant access to ports under 1024.</p>"},{"location":"database/","title":"Manual database setup.","text":"<p>Manual instructions to create a database for your Cacao Accounting setup.</p> <p>Warning</p> <p>Always use custom password and users to setup your database credentials, generic users and password in this guide do not must be used in production enviroments.</p> <p>Info</p> <p>Container based deployment do not requieres manual database setup because OCI images for mayor database services includes apropiate scritps to create the database at the first run.</p>"},{"location":"database/#supported-databases","title":"Supported databases.","text":"<p>This database systems are fully tested as part of the Cacao Accounting Development.</p>"},{"location":"database/#sqlite","title":"SQLite","text":"<p>There is not aditional steps to use SQLite</p> <p>Example connection string:</p> <pre><code>sqlite:///path/to/cacaoaccounting.db\n</code></pre> <p>Warning</p> <p>Never uses SQLIte in continer based deplyment since SQLite files are stored in the container file system and always the container file system is ephemeral and all the data stored in it will destroyed in the next deployment.</p> <p>Info</p> <p>SQLite is the database engine that powers the desktop version of Cacao Accounting.</p>"},{"location":"database/#postgresql","title":"Postgresql:","text":"<p>Once installed Postgresql you can setup a new database with:</p> <pre><code>CREATE DATABASE cacaoaccountingdatabase;\nCREATE USER cacaosystemuser WITH PASSWORD 'cacao123+';\nGRANT ALL PRIVILEGES ON DATABASE cacaoaccountingdatabase TO cacaosystemuser;\n</code></pre> <p>You can use the PG800 (Pure Python Driver) and psycopg2 (Compiled Driver), those are the examples connection strings:</p> <p>PG8000:</p> <pre><code>postgresql+pg8000://user:password@host:port/dbname\n</code></pre> <p>PSYCOPG2:</p> <pre><code>postgresql+psycopg2://user:password@host:port/dbname\n</code></pre>"},{"location":"database/#mysql","title":"MySQL:","text":"<p>Once installed MySQL you can setup a database for your Cacao Accounting setup with</p> <pre><code>CREATE DATABASE IF NOT EXISTS cacaoaccounting;\nCREATE USER IF NOT EXISTS 'cacaodbuser' IDENTIFIED BY 'cacaopswd';\nGRANT ALL PRIVILEGES ON cacaoaccounting.* TO 'cacaodbuser';\nFLUSH PRIVILEGES;\n</code></pre> <p>MySQL Connection string example:</p> <pre><code>mysql+pymysql://&lt;username&gt;:&lt;password&gt;@&lt;host&gt;/&lt;dbname&gt;\n</code></pre> <p>Info</p> <p>Cacao Accounting is tested with MySQL version 8.</p>"},{"location":"dependencies/","title":"Dependency List","text":""},{"location":"dependencies/#python-packages","title":"Python Packages","text":"Package License Comment alembic MIT License A database migration tool for SQLAlchemy. argon2-cffi MIT license Argon2 for Python argon2-cffi-bindings MIT license Low-level CFFI bindings for Argon2 Babel BSD License Internationalization utilities cuid2 MIT License Collision-resistant ids optimized for horizontal scaling and performance. cryptography Apache-2.0 OR BSD-3-Clause cryptography is a package which provides cryptographic recipes and primitives to Python developers. Flask BSD License A simple framework for building complex web applications. Flask-Alembic MIT License Integrate Alembic with Flask. flask-babel BSD License (BSD-3-Clause) Adds i18n/l10n support for Flask applications. flask-caching BSD License Adds caching support to your Flask aplication. flask-login MIT License User authentication and session management for Flask. flask-sqlalchemy BSD License Add SQLAlchemy support to your Flask application. flask-wtf BSD License Form rendering, validation, and CSRF protection for Flask with WTForms. loguru MIT License Python logging made (stupidly) simple pg8000 BSD License PostgreSQL interface library pyjwt MIT License JSON Web Token implementation in Python PyMySQL MIT License Pure Python MySQL Driver python-ulid MIT License Universally unique lexicographically sortable identifier redis MIT License Python client for Redis database and key-value store sqlalchemy MIT License Database Abstraction Library teritorio BSD-3-Clause A library for country and currency ISO codes waitress Zope Public License (ZPL 2.1) Waitress WSGI server wtforms BSD License Form validation and rendering for Python web development."},{"location":"dependencies/#javascritp-packages","title":"JavaScritp Packages","text":"Package License Comment bootstrap MIT Sleek, intuitive, and powerful front-end framework for faster and easier web development. bootstrap-icons MIT Official open source SVG icon library for Bootstrap with over 2,000 icons. @popperjs/core MIT Tooltip &amp; Popover Positioning Engine"},{"location":"faq/","title":"Preguntas Precuentes..","text":""},{"location":"py_database_mysql/","title":"Setup a database for Cacao Accounting.","text":"<p>Once you have installed Cacao Accounting from sources or from pypi and have the <code>cacaoctl</code> available in <code>/opt/cacao-accounting/venv/bin/cacaoctl</code> you can setup your database service:</p>"},{"location":"py_database_mysql/#setup-mysql","title":"Setup MySQL","text":"<p>Follow the next steps to install MySQL in your system.</p>  APT Based OS RPM Based OS <p>Install MySQL with:</p> <pre><code>sudo apt update\nsudo apt install mysql-server -y\nmysql --version\nsudo systemctl enable mysql --now\nsudo systemctl status mysql\n</code></pre> <p>Install MySQL with:</p> <pre><code>sudo dnf update\nsudo dnf install mysql-server -y\nmysql --version\nsudo systemctl start mysqld.service --now\nsudo systemctl status mysqld\n</code></pre> <p>Once installed secure your MySQL database with:</p> <pre><code>sudo mysql_secure_installation\n</code></pre> <p>Info</p> <p>Refers to the MySQL official documentation about the secure installation script</p> <p>Once you have installer and secured MySQL loggin with:</p> <pre><code>sudo mysql -u root -p\n</code></pre> <p>And create a user and database with:</p> <pre><code>CREATE DATABASE IF NOT EXISTS cacaoaccounting;\nCREATE USER IF NOT EXISTS 'cacaodbuser' IDENTIFIED BY 'cacaodbpswd';\nGRANT ALL PRIVILEGES ON cacaoaccounting.* TO 'cacaodbuser';\nFLUSH PRIVILEGES;\n</code></pre> <p>Warning</p> <p>It is recommend to use a custom user and password to setup your database. Remember to save your <code>user</code>, <code>password</code> and <code>database name</code> for future reference.</p> <p>With this setup you can set the <code>CACAO_DB</code> enviroment variable to the conection string of the database you have created, also set a <code>SECRET_KEY</code> enviroment variable with lowercases, uppercases and numbers.</p> <pre><code>sudo export CACAO_DB=mysql+pymysql://cacaodbuser:cacaodbpswd@localhost/cacaoaccounting\nsudo export CACAO_KEY=s\u00f1ldk\u00f1sadfmnskpfmskn1235aaaaaaAAAAAAA\n</code></pre> <p>Note</p> <p>Aditional info about Cacao Accounting configuration is available here.</p> <p>Populate the database and create a new administrator user with:</p> <pre><code>CACAO_USER=cacaoadmin\nCACAO_PSWD=cacaoadminpass\n/opt/cacao-accounting/venv/bin/cacaoctl setupdb\n</code></pre> <p>Warning</p> <p>Use a custom user id and password for the administrative user of Cacao Accounting.</p> <p>If not errors are reported your database show be populated with the system tables and initial records.</p> <p>You can continue to setup systemd to start Cacao Accounting at startup.</p>"},{"location":"py_database_psql/","title":"Setup a database for Cacao Accounting.","text":"<p>Once you have installed Cacao Accounting from sources or from pypi and have the <code>cacaoctl</code> available in <code>/opt/cacao-accounting/venv/bin/cacaoctl</code> you can setup your database service:</p>"},{"location":"py_database_psql/#setup-postgresql","title":"Setup PostgreSQL","text":"<p>Follow the next steps to install PostgreSQL in your system.</p>  APT Based OS RPM Based OS <p>Install PostgreSQL with:</p> <pre><code>sudo apt update\nsudo apt install -y postgresql-common\nsudo /usr/share/postgresql-common/pgdg/apt.postgresql.org.sh\nsudo apt install -y postgresql\nsudo systemctl enable postgresql --now\n</code></pre> <p>Install PostgreSQL with:</p> <pre><code>sudo dnf update\nsudo dnf install -y postgresql-server postgresql\nsudo postgresql-setup --initdb\nsudo systemctl enable postgresql --now\n</code></pre> <p>Secure your database with:</p> <pre><code>sudo -u postgres psql\n</code></pre> <p>And in the psql console execute:</p> <pre><code>ALTER USER postgres WITH ENCRYPTED PASSWORD 'strong_password';\nCREATE USER cacaodbuser ENCRYPTED PASSWORD 'cacaodbpwsd';\n\\q\n</code></pre> <p>Warning</p> <p>It is recommend to use a custom user and password to setup your database. Remember to save your <code>user</code>, <code>password</code> and <code>database name</code> for future reference.</p> <p>Allow password authentication on the server with:</p>  APT Based OS RPM Based OS <p>Install PostgreSQL with:</p> <pre><code>sudo sed -i '/^local/s/peer/scram-sha-256/' /etc/postgresql/16/main/pg_hba.conf\n</code></pre> <p>Install PostgreSQL with:</p> <pre><code>sudo cp /var/lib/pgsql/data/pg_hba.conf /var/lib/pgsql/data/pg_hba.conf.bak\nsudo nano /var/lib/pgsql/data/pg_hba.conf\n</code></pre> <p>Find the following configuration section within the file</p> <pre><code>local   all             all                                     peer\n</code></pre> <p>And change <code>peer</code> with <code>md5</code>:</p> <pre><code>local   all             all                                     md5\n</code></pre> <p>Restart the database server with:</p> <pre><code>sudo systemctl restart postgresql\n</code></pre> <p>Create the Cacao Accounting database with:</p> <pre><code>sudo -u postgres cacaoaccountingdb -O cacaodbuser\n</code></pre> <p>With this setup you can set the <code>CACAO_DB</code> enviroment variable to the conection string of the database you have created, also set a <code>SECRET_KEY</code> enviroment variable with lowercases, uppercases and numbers.</p> <pre><code>sudo export CACAO_DB=postgresql+pg8000://cacaodbuser:cacaodbpwsd@localhost/cacaoaccountingdb\nsudo export CACAO_KEY=s\u00f1ldk\u00f1sadfmnskpfmskn1235aaaaaaAAAAAAA\n</code></pre> <p>Note</p> <p>Aditional info about Cacao Accounting configuration is available here.</p> <p>Populate the database and create a new administrator user with:</p> <pre><code>CACAO_USER=cacaoadmin\nCACAO_PSWD=cacaoadminpass\n/opt/cacao-accounting/venv/bin/cacaoctl setupdb\n</code></pre> <p>Warning</p> <p>Use a custom user id and password for the administrative user of Cacao Accounting.</p> <p>If not errors are reported your database show be populated with the system tables and initial records.</p> <p>You can continue to setup systemd to start Cacao Accounting at startup.</p>"},{"location":"py_https/","title":"Setup a SSL certificate.","text":"<p>The Caddy server, will setup a automatic SSL certificate in most cases, to have a valid SSL certificate you will need a <code>domain name</code> pointing to your server <code>ip</code> with a <code>A</code> or <code>AAA</code> DNS record.</p> <p>With a DNS record pointing to your server IP you can use theautomatic https feature of the Caddy web server, for this you must update your Caddyfile in <code>/etc/caddy/Caddyfile</code> to list your domain name like this:</p> <pre><code>example.com, www.example.com {\n    ...\n}\n</code></pre>"},{"location":"py_os/","title":"General OS Setup.","text":""},{"location":"py_pypi/","title":"Install Cacao Accounting from the Python Package Index.","text":"<p>You can install Cacao Accounting in a dedicated server as a Python Package hosted in the Python Package Index .</p> <p>Note</p> <p>If you want to run aditional software in your server it is recomended to install Cacao Accounting using the OCI image  to isolate each service from others.</p> <p>You can install Cacao Accounting in any Linux OS that supports:</p> <ul> <li>A compatible database server: PostgreSQL or MySQL.</li> <li>A web server like nginx</li> <li>A supported version of Python (&gt;=3.8)</li> </ul> <p>Success</p> <p>It is recommend to choose a long tern support version of your base OS like Ubuntu LTS (.deb based OS) or a RedHat Linux clone like Rocky Linux (.rpm based OS).</p> <p>Tip</p> <p>It is recommended to install Cacao Accounting in the <code>/opt</code> directory of your Linux system, this is the directory recommend by the Linux FHS so you main Cacao Accounting installation directoty will be <code>/opt/cacao-accounting</code> and the <code>cacaoctl</code> tool will be available in <code>/opt/cacao-accounting/venv/bin/cacaoctl</code>, this path will be used latter in this  guide.</p>"},{"location":"py_pypi/#create-a-python-virtual-enviroment","title":"Create a Python Virtual Enviroment:","text":"<pre><code>cd /pot\nmkdir cacao-accounting\ncd cacao-accounting\npython3 -m venv venv \nsudo source venv/bin/activate\n</code></pre>"},{"location":"py_pypi/#install-cacao-accounting-in-the-virtual-enviroment","title":"Install Cacao Accounting in the Virtual Enviroment:","text":"<p>Install Cacao Accounting with:</p> <pre><code># Ensure your virtual env is active!\npython -m pip install cacao-accounting\n</code></pre>"},{"location":"py_pypi/#verify-cacao-accouting-is-installed-with","title":"Verify Cacao Accouting is installed with:","text":"<p>You can check Cacao Accounting is installed with:</p> <pre><code>cacaoctl version\n0.0.0.dev20241209\n</code></pre> <p>Once Cacao Accounting is installed and the <code>cacaoctl</code> tool is available in <code>/opt/cacao-accounting/venv/bin/cacaoctl</code> you can continue to setup your database server, you can choose  PostgreSQL or MySQL.</p>"},{"location":"py_redis/","title":"Setup a Redis service.","text":"APT Based OS RPM Based OS <pre><code>sudo apt update\nsudo apt install -y redis-server\nsudo systemctl enable redis-server.service --now\n</code></pre> <pre><code>sudo dnf update\nsudo dnf install -y redis\nsudo systemctl enable redis.service --now\n</code></pre> <p>Once Redis is available you can update your systemd unit service with the new enviromet variable <code>CACHE_REDIS_URL</code> pointing to <code>redis://localhost:6379/1</code>:</p> <pre><code>[Unit]\nDescription=Cacao Accounting service.\nAfter=syslog.target network.target\n\n[Service]\nType=simple\nRestart=on-failure\nRestartSec=5\nEnvironment=\"CACAO_KEY=hajka\u00f1dkjda455654ASSDAFCAFADASD\u00d1\u00d1\u00d1\u00d1\u00d1\u00d1\u00f1\u00f1\u00f1\u00f1\u00f1\u00f1lkadjasdkldaldkd\"\nEnvironment=\"CACAO_DB=protocol+driver://user:password@host:port/dbname\"\nEnvironment=\"CACHE_REDIS_URL= redis://localhost:6379/1\"\nExecStart=/opt/cacao-accounting/venv/bin/cacaoctl serve\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"py_server/","title":"Setup a reverse proxy server","text":"<p>In this step we will seutp Caddy as a proxy server, install Caddy Server with:</p>  APT Based OS RPM Based OS <pre><code>sudo curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg\nsudo curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list\nsudo apt update\nsudo apt install -y caddy\nsudo ufw allow 80\nsudo ufw allow 443\nsudo ufw reload\nsudo systemctl enable caddy --now\n</code></pre> <pre><code>sudo dnf install -y 'dnf-command(copr)'\nsudo dnf copr enable @caddy/caddy\nsudo dnf install -y caddy\nsudo firewall-cmd --permanent --zone=public --add-service=http\nsudo firewall-cmd --permanent --zone=public --add-service=https\nsudo firewall-cmd --reload\nsudo systemctl enable caddy --now\n</code></pre> <p>Once installed Caddy will create the configuration file in <code>/etc/caddy/Caddyfile</code>, you can configure Caddy as reverse proxy with the following configuration:</p> <pre><code>:80 {\n  reverse_proxy localhost:8080\n}\n</code></pre> <p>With this setup the server server will recibe the request and past then to the wsgi in the backgroud.</p>"},{"location":"py_sources/","title":"Install Cacao Accounting from Sources.","text":"<p>Cacao Accounting source code is hosted in Github, you can install Cacao Accounting from sources following the next steps:</p> <p>Success</p> <p>In order to successfully install Cacao Accounting from sources you need this tools available in your system: Python , git  and npm .</p> <p>Tip</p> <p>It is recommended to install Cacao Accounting in the <code>/opt</code> directory of your Linux system, this is the directory recommend by the Linux FHS so you main Cacao Accounting installation directoty will be <code>/opt/cacao-accounting</code> and the <code>cacaoctl</code> tool will be available in <code>/opt/cacao-accounting/venv/bin/cacaoctl</code>, this path will be used latter in this  guide.</p>"},{"location":"py_sources/#clone-the-git-repository","title":"Clone the git repository:","text":"<p>Get the sources from Github with:</p> <pre><code>cd /opt\ngit clone https://github.com/cacao-accounting/cacao-accounting.git\ncd cacao-accounting\n</code></pre>"},{"location":"py_sources/#create-a-python-virtual-enviroment","title":"Create a Python Virtual Enviroment:","text":"<pre><code>python3 -m venv venv \nsource venv/bin/activate\n</code></pre>"},{"location":"py_sources/#install-node-modules","title":"Install node modules:","text":"<pre><code>cd cacao_accounting/static\nnpm install\n# Back to main directory with\ncd ..\ncd ..\n</code></pre>"},{"location":"py_sources/#install-cacao-accounting-in-the-virtual-enviroment","title":"Install Cacao Accounting in the Virtual Enviroment:","text":"<p>Install Cacao Accounting with:</p> <pre><code># Ensure your virtual env is active!\npython -m pip install .\n</code></pre>"},{"location":"py_sources/#verify-cacao-accouting-is-installed-with","title":"Verify Cacao Accouting is installed with:","text":"<p>You can check Cacao Accounting is installed with:</p> <pre><code>cacaoctl version\n0.0.0.dev20241209\n</code></pre> <p>Once Cacao Accounting is installed and the <code>cacaoctl</code> tool is available in <code>/opt/cacao-accounting/venv/bin/cacaoctl</code> you can continue to setup your database service, you can choose PostgreSQL and MySQL.</p>"},{"location":"py_systemd/","title":"Setup Systemd","text":""},{"location":"py_systemd/#setup-the-cacao-accounting-service-with-systemd","title":"Setup the Cacao Accounting service with systemd.","text":"<p>In most Linux systems systemd is the default init system, with systemd you can setup a autostart service to start Cacao Accounting on system boot. You will create a <code>.unit</code> file to configure a system service.</p> <p>Note</p> <p>If you follow the instructions to install Cacao Accounting from sources or from the Python Package Index the <code>cacaoctl</code> tool should be instaled and available in <code>/opt/cacao-accounting/venv/bin/cacaoctl</code>.</p> <p>Tip</p> <p>You must configure and initialice the database for Cacao Accounting, you can shoose the database server you prefer PostgreSQL or MySQL, you will need the connections string to configure your database service as a enviroment variable in the <code>.unit</code> file.</p>"},{"location":"py_systemd/#example-unit-file","title":"Example <code>.unit</code> file.","text":"<pre><code>[Unit]\nDescription=Cacao Accounting service.\nAfter=syslog.target network.target\n\n[Service]\nType=simple\nRestart=on-failure\nRestartSec=5\nEnvironment=\"CACAO_KEY=hajka\u00f1dkjda455654ASSDAFCAFADASD\u00d1\u00d1\u00d1\u00d1\u00d1\u00d1\u00f1\u00f1\u00f1\u00f1\u00f1\u00f1lkadjasdkldaldkd\"\nEnvironment=\"CACAO_DB=protocol+driver://user:password@host:port/dbname\"\nExecStart=/opt/cacao-accounting/venv/bin/cacaoctl serve\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>Save the file in <code>/etc/systemd/system/cacao-accounting.service</code></p> <p>Note</p> <p>Cacao Accounting requires at less two required configuration options to run <code>CACAO_DB</code> and <code>CACAO_KEY</code> to run, you can read more about available configuration options in the configuration page also you can find examples of the correct connection string format according to the database service you are using.</p>"},{"location":"py_systemd/#reload-the-systemd-daemon-and-start-the-cacao-accounting-service","title":"Reload the systemd daemon and start the Cacao Accounting service.","text":"<p>Once you have configured your Cacao Accounting <code>.unit</code> file you can start the service with</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable cacao-accounting.service --now\nsudo systemctl status cacao-accounting.service\n</code></pre> <p>Once configured your Cacao Accounting service you can visit <code>&lt;your_ip_address&gt;:8080</code> and access the Cacao Accounting loggin screen, you can loggin with the administrator user and password and follow the initial setup wizard.</p> <p>Note</p> <p>For small setups with a few users (&lt;= 2 users) this setup should work, but you are sposing the built in wsgi server to the internet, this is not the recommend setup if your are going to serve many users.</p> <p>You can configure a web server to ensure your setup and do not spoce your wsgi server to the internet like nginx and Caddy Server, in the next step we will configure Caddy as reverse proxy.</p>"},{"location":"set_up/","title":"Cacao Accounting setup:","text":"<p>Following the the twelve factor app recommendations Cacao Accounting can be configured with enviroment variables.</p> <p>This is a list of available options. es:</p>"},{"location":"set_up/#required","title":"Required","text":"Option Description Examples / Comments CACAO_DB Database connection string. See examples above CACAO_KEY Unique key to secure cookies. Must contains uppercase, lowercase and numbers"},{"location":"set_up/#optional","title":"Optional","text":"Option Description Examples / Comments CACAO_THREADS CPU threads to use. Default 4 CACAO_PORT POrt for the WSGI server to listen Default 8080 PYTHON_CPU_COUNT Max CPU unit to use Container only CACHE_REDIS_URL Redis service Connection String Example: redis://localhost:6379/1"},{"location":"set_up/#initial-setup","title":"Initial Setup","text":"<p>The first time your run Cacao Accounting the following variables are used to set a custom master user, if not available default options will be used.</p> Option Description Examples / Comments CACAO_USER Master user <code>id</code> Default <code>cacao</code> CACAO_PSWD Master user <code>password</code> Default <code>cacao</code> <p>Warning</p> <p>Default user and password are available in the app source code so it is advised always use custom user and password for the system master user.</p>"},{"location":"set_up/#setup-enviroment-variables","title":"Setup enviroment variables:","text":""},{"location":"set_up/#linux","title":"Linux","text":"<pre><code>export CACAO_DB=DATABASE_CONNECTION_URI\nexport CACAO_KEY=SECRETKEY\n</code></pre>"},{"location":"set_up/#windows","title":"Windows:","text":"<pre><code>setx CACAO_DB \"DATABASE_CONNECTION_URI\"\nsetx CACAO_KEY \"SECRETKEY\"\n</code></pre>"},{"location":"set_up/#dockerfile","title":"Dockerfile","text":"<pre><code>ENV CACAO_DB=DATABASE_CONNECTION_URI\nENV CACAO_KEY=SECRETKEY\n</code></pre>"},{"location":"set_up/#database-connection-string","title":"Database Connection String","text":"<p>Info</p> <p>Cacao Accounting is tested with SQLite, Postgresql and MySQL8, the system should work with MariaDB without changes but support for MariaDB must be considered experimental and not fully tested.</p>"},{"location":"set_up/#postgresql","title":"Postgresql :","text":""},{"location":"set_up/#pg8000","title":"pg8000","text":"<p>pg8000 is a pure Python Postgresql driver, it is the default option because not requieres a compilation process.</p> <p>Examples:</p> <pre><code>postgresql+pg8000://usuario:contrase\u00f1a@servidor:puerto/database\n\npostgresql+pg8000://cacao:cacao@localhost:5432/cacao\n</code></pre>"},{"location":"set_up/#psycopg2","title":"psycopg2","text":"<p>psycopg2 is a compiled Python Postgresql driver, it is recommend to compile the driver with the same version of Postgresql you will using in production. The OCI image includes a compiled version of psycopg2 by default.</p> <p>Examples:</p> <pre><code>postgresql+psycopg2://usuario:contrase\u00f1a@servidor:puerto/database\n\npostgresql+psycopg2://cacao:cacao@localhost:5432/cacao\n</code></pre>"},{"location":"set_up/#mysql","title":"MySQL :","text":"<p>Examples:</p> <pre><code>mysql+pymysql://ususario:contrase\u00f1a@servidor:puerto/database\n\nmysql+pymysql://cacao:cacao@localhost:3306/cacao\n</code></pre> <p>Note</p> <p>The <code>pymysql</code> driver requieres the <code>pyca/cryptography</code> library to be available to connect to the database server, the required libraries are incluyed by default in the OCI image, most of the time the <code>pip</code> with install the <code>cryptography</code> package apropiate for your system you can check the installation documentarion for a list of all supported platforms.</p>"},{"location":"set_up/#sqlite","title":"SQLite :","text":"<p>Warning</p> <p>Never uses SQLIte in continer based deplyment since SQLite files are stored in the container file system and always the container file system is ephemeral and all the data stored in it will destroyed in the next deployment.</p> <pre><code>sqlite://cacaoaccounting.db\n</code></pre>"},{"location":"setup/","title":"Setup overview","text":"<p>Cacao Accounting is a Python  based project with the Flask  microframework as base, Flask uses the wsgi protocol, to setup a Cacao Accounting instance you need:</p> <ol> <li> <p>A WSGI application server, waitress is included by default.</p> </li> <li> <p>A WEB server, nginx and Caddy are common options.</p> </li> <li> <p>A database service, SQLite, Postgresql, and MySQL8    are supported.</p> </li> <li> <p>A optional Redis server.</p> </li> </ol> <p>You can set up a Cacao Instance using:</p> <ol> <li>From the  OCI Image.</li> <li>From the  Python Package Index.</li> <li>From  sources.</li> </ol>"},{"location":"blog/","title":"Blog","text":""},{"location":"es/faq%20/","title":"Preguntas Precuentes.","text":""}]}